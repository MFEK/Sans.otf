<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg:svg
   viewBox="0 0 1500 600"
   height="640"
   width="1600"
   version="1.1"
   id="svg2"
   sodipodi:docname="MFEK-Sans.svg"
   inkscape:version="1.1.2 (0a00cf5339, 2022-02-04)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:dc="http://purl.org/dc/elements/1.1/">
  <svg:path
     id="path9115"
     style="font-weight:bold;font-size:266.667px;line-height:1.25;font-family:'MFEK Sans';-inkscape-font-specification:'MFEK Sans Bold';text-align:center;letter-spacing:-10px;word-spacing:0px;text-anchor:middle;white-space:pre;stroke-width:1"
     d="M 967.86914 193.35938 C 919.20241 193.35938 894.53516 216.95894 894.53516 250.95898 C 894.53516 291.35903 925.86949 304.95949 966.26953 312.82617 C 998.00291 318.95951 1007.2031 324.29231 1007.2031 334.95898 C 1007.2031 351.09235 995.60317 358.02539 969.20312 358.02539 C 940.40309 358.02539 924.53516 347.22542 924.53516 326.02539 L 924.53516 319.35938 C 924.53516 318.42604 923.46979 318.29297 923.20312 318.29297 L 889.86914 318.29297 C 889.46914 318.29297 888.66797 318.55884 888.66797 319.49219 L 888.66797 332.1582 C 888.66797 366.29158 917.33639 389.35938 967.20312 389.35938 C 1021.0699 389.35938 1049.2031 368.55968 1049.2031 330.29297 C 1049.2031 293.89293 1020.1356 279.49181 968.93555 269.0918 C 948.93551 264.95846 935.20313 258.42567 935.20312 244.95898 C 935.20312 232.29231 947.2031 222.69141 967.20312 222.69141 C 991.20316 222.69141 1005.2031 236.55792 1005.2031 249.22461 L 1005.2031 255.22461 C 1005.2031 256.15795 1005.7352 256.29102 1006.5352 256.29102 L 1038.5352 256.29102 C 1039.2019 256.29102 1039.8691 256.15795 1039.8691 255.22461 L 1039.8691 247.22461 C 1039.8691 218.55791 1017.0692 193.35938 967.86914 193.35938 z M 127.86914 198.02539 C 126.9358 198.02539 126.53516 198.42604 126.53516 199.35938 L 126.53516 383.35938 C 126.53516 384.29271 126.9358 384.69141 127.86914 384.69141 L 158.53516 384.69141 C 159.46849 384.69141 159.86914 384.29271 159.86914 383.35938 L 159.86914 248.02539 L 211.33594 383.35938 C 211.73594 384.29271 212.26783 384.69141 213.20117 384.69141 L 234.53516 384.69141 C 235.4685 384.69141 236.00234 384.29271 236.40234 383.35938 L 285.20312 251.49219 L 285.20312 383.35938 C 285.20312 384.29271 285.60181 384.69141 286.53516 384.69141 L 326.53516 384.69141 C 327.46849 384.69141 327.86914 384.29271 327.86914 383.35938 L 327.86914 199.35938 C 327.86914 198.42604 327.46849 198.02539 326.53516 198.02539 L 274.53516 198.02539 C 273.60182 198.02539 273.06797 198.42604 272.66797 199.35938 L 228.53516 317.49219 L 185.73633 199.35938 C 185.33633 198.42604 184.80247 198.02539 183.86914 198.02539 L 127.86914 198.02539 z M 349.86914 198.02539 C 348.93581 198.02539 348.53516 198.42604 348.53516 199.35938 L 348.53516 383.35938 C 348.53516 384.55937 348.66914 384.69141 349.86914 384.69141 L 392.53516 384.69141 C 393.73517 384.69141 393.86914 384.55937 393.86914 383.35938 L 393.86914 306.02539 L 450.53516 306.02539 C 451.73517 306.02539 451.86914 305.89141 451.86914 304.69141 L 451.86914 280.69141 C 451.86914 279.49141 451.73517 279.35938 450.53516 279.35938 L 393.86914 279.35938 L 393.86914 231.35938 L 485.86914 231.35938 C 486.80248 231.35938 487.20117 230.95873 487.20117 230.02539 L 487.20117 199.35938 C 487.20117 198.42604 486.80248 198.02539 485.86914 198.02539 L 349.86914 198.02539 z M 499.20117 198.02539 C 498.26783 198.02539 497.86914 198.42604 497.86914 199.35938 L 497.86914 383.35938 C 497.86914 384.29271 498.26783 384.69141 499.20117 384.69141 L 644.53516 384.69141 C 645.46849 384.69141 645.86914 384.29271 645.86914 383.35938 L 645.86914 352.69141 C 645.86914 351.75806 645.46849 351.35937 644.53516 351.35938 L 543.20312 351.35938 L 543.20312 302.69141 L 605.20312 302.69141 C 606.13646 302.69141 606.53516 302.29272 606.53516 301.35938 L 606.53516 277.35938 C 606.53516 276.42604 606.13646 276.02539 605.20312 276.02539 L 543.20312 276.02539 L 543.20312 231.35938 L 641.86914 231.35938 C 642.80247 231.35938 643.20312 230.95873 643.20312 230.02539 L 643.20312 199.35938 C 643.20312 198.42604 642.80247 198.02539 641.86914 198.02539 L 499.20117 198.02539 z M 660.53516 198.02539 C 659.60181 198.02539 659.20117 198.42604 659.20117 199.35938 L 659.20117 383.35938 C 659.20117 384.29271 659.60181 384.69141 660.53516 384.69141 L 703.20117 384.69141 C 704.13449 384.69141 704.53516 384.29271 704.53516 383.35938 L 704.53516 324.55859 L 726.00195 302.82617 L 776.93555 383.35938 C 777.60221 384.42604 778.26978 384.69141 779.20312 384.69141 L 831.20312 384.69141 C 832.13646 384.69141 832.40156 384.42604 831.60156 383.35938 L 755.06836 273.35938 L 827.86914 199.35938 C 828.80248 198.42604 828.8017 198.02539 827.06836 198.02539 L 782.53516 198.02539 C 781.20181 198.02539 780.53581 198.69271 779.86914 199.35938 L 704.53516 280.42578 L 704.53516 199.35938 C 704.53516 198.42604 704.13449 198.02539 703.20117 198.02539 L 660.53516 198.02539 z M 1130.6699 240.02539 C 1089.8698 240.02539 1066.0014 258.6911 1062.1348 289.75781 C 1062.0014 290.55781 1062.4025 290.95898 1063.3359 290.95898 L 1103.3359 290.95898 C 1104.2693 290.95898 1104.6699 290.55781 1104.6699 289.75781 C 1105.2034 277.22447 1112.5349 267.35938 1127.0684 267.35938 C 1140.4017 267.35938 1147.3359 273.62565 1147.3359 282.95898 L 1147.3359 287.625 C 1147.3359 296.02501 1138.6682 299.8914 1114.1348 302.69141 C 1067.4681 308.02475 1052.9355 325.22601 1052.9355 349.35938 C 1052.9355 378.02607 1073.8689 389.35938 1102.4023 389.35938 C 1122.9356 389.35938 1139.2031 382.02632 1149.2031 370.29297 C 1150.9365 376.02631 1153.6018 380.42591 1156.5352 383.89258 C 1157.0685 384.42591 1157.7366 384.69141 1158.6699 384.69141 L 1198.5352 384.69141 C 1199.4686 384.69141 1199.6022 384.42448 1198.9355 383.75781 C 1194.1355 378.15781 1191.3359 369.49233 1191.3359 356.95898 L 1191.3359 289.625 C 1191.3359 255.89162 1172.0033 240.02539 1130.6699 240.02539 z M 1296.9355 240.02539 C 1276.9355 240.02539 1260.2695 250.02473 1252.2695 266.69141 L 1252.2695 246.02539 C 1252.2695 245.09206 1251.8689 244.69141 1250.9355 244.69141 L 1209.6016 244.69141 C 1208.6681 244.69141 1208.2695 245.09206 1208.2695 246.02539 L 1208.2695 383.35938 C 1208.2695 384.29271 1208.6681 384.69141 1209.6016 384.69141 L 1252.2695 384.69141 C 1253.2029 384.69141 1253.6016 384.29271 1253.6016 383.35938 L 1253.6016 311.625 C 1253.6016 283.62497 1264.0022 270.69141 1278.9355 270.69141 C 1291.8689 270.69141 1297.6016 278.29231 1297.6016 292.95898 L 1297.6016 383.35938 C 1297.6016 384.29271 1298.0023 384.69141 1298.9355 384.69141 L 1341.6016 384.69141 C 1342.5349 384.69141 1342.9355 384.29271 1342.9355 383.35938 L 1342.9355 289.625 C 1342.9355 255.62496 1325.869 240.02539 1296.9355 240.02539 z M 1414.668 240.02539 C 1377.4679 240.02539 1355.0684 255.7583 1355.0684 283.625 C 1355.0684 307.75835 1369.603 320.15819 1409.7363 330.1582 C 1430.9364 335.7582 1438.4023 340.42473 1438.4023 348.69141 C 1438.4023 358.02475 1429.868 362.69141 1414.668 362.69141 C 1397.7345 362.69141 1385.3359 356.82567 1385.3359 342.95898 L 1385.3359 338.1582 C 1385.3359 337.22486 1384.6697 336.95898 1383.7363 336.95898 L 1351.0684 336.95898 C 1350.0017 336.95898 1349.8691 337.09207 1349.8691 338.02539 L 1349.8691 344.02539 C 1349.8691 375.22543 1372.8019 389.35937 1416.5352 389.35938 C 1458.802 389.35938 1481.7363 374.82582 1481.7363 344.42578 C 1481.7363 319.09243 1468.8018 307.62502 1423.0684 295.625 C 1399.4684 289.22499 1393.7363 285.89142 1393.7363 278.69141 C 1393.7363 269.75806 1401.4694 265.35937 1414.8027 265.35938 C 1429.7361 265.35938 1440.4023 271.35768 1440.4023 282.29102 L 1440.4023 285.625 C 1440.4023 286.55832 1440.8025 286.95898 1441.8691 286.95898 L 1473.7363 286.95898 C 1474.6697 286.95898 1475.0684 286.69116 1475.0684 285.75781 L 1475.0684 283.0918 C 1475.0684 255.6251 1452.268 240.02539 1414.668 240.02539 z M 1147.3359 316.02539 L 1147.3359 328.95898 C 1147.3359 350.42567 1133.469 362.69141 1116.9355 362.69141 C 1103.8689 362.69141 1098.2695 355.89272 1098.2695 345.35938 C 1098.2695 332.69269 1106.2689 325.2254 1126.4023 322.02539 C 1135.3356 320.55873 1142.6693 318.82539 1147.3359 316.02539 z "
     transform="scale(0.9375)" />
  <script
     id="wfomq">try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) {
    var scriptNode = document.getElementById(scriptId);
    function showNotification() {
        const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {'detail': {}});
        window.dispatchEvent(evt);
    }
    function overrideCanvasProto(root) {
        function overrideCanvasInternal(name, old) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var width = this.width;
                        var height = this.height;
                        var context = this.getContext(&quot;2d&quot;);
                        var imageData = context.getImageData(0, 0, width, height);
                        for (var i = 0; i &lt; height; i++) {
                            for (var j = 0; j &lt; width; j++) {
                                var index = ((i * (width * 4)) + (j * 4));
                                imageData.data[index + 0] = imageData.data[index + 0] + r;
                                imageData.data[index + 1] = imageData.data[index + 1] + g;
                                imageData.data[index + 2] = imageData.data[index + 2] + b;
                                imageData.data[index + 3] = imageData.data[index + 3] + a;
                            }
                        }
                        context.putImageData(imageData, 0, 0);
                        showNotification();
                        return old.apply(this, arguments);
                    }
                }
            );
        }
        overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL);
        overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob);
        //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile);
    }
    function overrideCanvaRendProto(root) {
        const name = &quot;getImageData&quot;;
        const getImageData = root.prototype.getImageData;

        root.prototype[storedObjectPrefix + name] = getImageData;

        Object.defineProperty(root.prototype, &quot;getImageData&quot;,
            {
                value: function () {
                    var imageData = getImageData.apply(this, arguments);
                    var height = imageData.height;
                    var width = imageData.width;
                    // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height);
                    for (var i = 0; i &lt; height; i++) {
                        for (var j = 0; j &lt; width; j++) {
                            var index = ((i * (width * 4)) + (j * 4));
                            imageData.data[index + 0] = imageData.data[index + 0] + r;
                            imageData.data[index + 1] = imageData.data[index + 1] + g;
                            imageData.data[index + 2] = imageData.data[index + 2] + b;
                            imageData.data[index + 3] = imageData.data[index + 3] + a;
                        }
                    }
                    showNotification();
                    return imageData;
                }
            }
        );
    }
    function inject(element) {
        if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) {
            try {
                var hasAccess = element.contentWindow.HTMLCanvasElement;
            } catch (e) {
                console.log(&quot;can't access &quot; + e);
                return;
            }
            overrideCanvasProto(element.contentWindow.HTMLCanvasElement);
            overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D);
            overrideDocumentProto(element.contentWindow.Document);
        }
    }
    function overrideDocumentProto(root) {
        function doOverrideDocumentProto(old, name) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var element = old.apply(this, arguments);
                        // console.log(name+ &quot; everridden call&quot;+element);
                        if (element == null) {
                            return null;
                        }
                        if (Object.prototype.toString.call(element) === '[object HTMLCollection]' ||
                            Object.prototype.toString.call(element) === '[object NodeList]') {
                            for (var i = 0; i &lt; element.length; ++i) {
                                var el = element[i];
                                // console.log(&quot;elements list inject &quot; + name);
                                inject(el);
                            }
                        } else {
                            // console.log(&quot;element inject &quot; + name);
                            inject(element);
                        }
                        return element;
                    }
                }
            );
        }
        doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;);
        doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;);
        doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;);
    }
    overrideCanvasProto(HTMLCanvasElement);
    overrideCanvaRendProto(CanvasRenderingContext2D);
    overrideDocumentProto(Document);
    scriptNode.parentNode.removeChild(scriptNode);
})(7,6,5,11,&quot;wfomq&quot;, &quot;xyagj&quot;);} catch (e) {console.error(e);}</script>
  <sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="1920"
     inkscape:window-height="1044"
     id="namedview96"
     showgrid="false"
     inkscape:zoom="0.43299557"
     inkscape:cx="1060.057"
     inkscape:cy="342.95963"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg2"
     inkscape:pagecheckerboard="0" />
  <svg:metadata
     id="metadata8">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </svg:metadata>
  <svg:defs
     id="defs6">
    <svg:rect
       x="-3.0599647"
       y="-1.6474022"
       width="1607.5922"
       height="656.03075"
       id="rect6839" />
    <svg:rect
       x="1.7986214"
       y="-5.2167645"
       width="1599.1722"
       height="642.41527"
       id="rect10227" />
    <svg:linearGradient
       id="linearGradient5684"
       inkscape:swatch="solid">
      <svg:stop
         id="stop5686"
         offset="0"
         style="stop-color:#6f5b14;stop-opacity:1;" />
    </svg:linearGradient>
  </svg:defs>
</svg:svg>
